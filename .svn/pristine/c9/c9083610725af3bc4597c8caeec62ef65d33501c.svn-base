<template>
    <div class="ix-popover"
         :class="[className]" v-show="thisVisible"
         @mouseenter="setVisible(true)" @mouseleave="trigger == 'hover' ? setVisible(false) : null">
      <ix-scrollpanel>
        <div class="ix-popover_sp_content" :style="{padding:padding}"><slot></slot></div>
      </ix-scrollpanel>
      <i class="ix-popover__arrow"></i>
      <slot name="reference"></slot>
    </div>
</template>

<script>
  import {checkMouseUp} from "#/util";
  import {getScrollParent} from "#/dom";
  import IxScrollpanel from '../scrollpanel'
    export default {
      name: "ix-popover",
      components: {IxScrollpanel},
      props: {
        visible: {
          type: Boolean,
          default: false
        },
        trigger: {
          type: String,
          default: 'click'
        },
        className: String,
        width: String,
        padding: {
          type: String,
          default: '10px'
        }
      },
      data () {
        return {
          thisVisible: this.visible,
          target: null,
          scrollParent: null
        }
      },
      watch: {
        visible (v) {
          this.thisVisible = v
        }
      },
      mounted() {
        if (this.$slots.reference && this.$slots.reference[0].elm) {
          this.$el.parentNode.appendChild(this.$slots.reference[0].elm)
          this.bindEvent(this.$slots.reference[0].elm)
        }
      },
      beforeDestroy() {
        window.removeEventListener('mouseup', this.mouseup)
        if (this.scrollParent) this.scrollParent.removeEventListener('scroll', this.onscroll)
        this.scrollParent = null
        if (this.target) {
          this.target.removeEventListener('click', this.target_click)
          this.target.removeEventListener('mouseenter', this.target_enter)
          this.target.removeEventListener('mouseleave', this.target_leave)
          this.target = null
        }
      },
      methods: {
        mouseup (e) {
          if (checkMouseUp(e, 'ix-popover')) this.hide()
        },
        setVisible (v) {
          this.thisVisible = v
          this.$emit('update:visible', this.thisVisible)
        },
        show (target) {
          document.body.appendChild(this.$el)
          this.target = target
          this.scrollParent = getScrollParent(target)
          this.setVisible(true)
          this.$nextTick(() => {
            this.$el.style.width = this.width == "100%" ? this.target.offsetWidth + 'px' : (this.width || 'auto')
            this.updateXY()
          })
          window.addEventListener('mouseup', this.mouseup)
          this.scrollParent.addEventListener('scroll', this.onscroll)
        },
        hide () {
          this.setVisible(false)
          window.removeEventListener('mouseup', this.mouseup)
          if (this.scrollParent) this.scrollParent.removeEventListener('scroll', this.onscroll)
        },
        updateXY () {
          let xy = this.target.getBoundingClientRect()
          this.$el.style.left = (xy.left + (this.target.clientWidth / 2 - this.$el.clientWidth / 2)) + 'px'
          // this.$el.style.left = xy.left + 'px'
          this.$el.style.top = xy.top + (this.target.clientHeight + 10) + 'px'
        },
        onscroll (e) {
          this.updateXY()
        },
        bindEvent (target) {
          this.target = target
          if (this.trigger == 'click') target.addEventListener('click', this.target_click)
          else {
            target.addEventListener('mouseenter', this.target_enter)
            target.addEventListener('mouseleave', this.target_leave)
          }
        },
        target_click () {
          this.thisVisible ? this.hide() : this.show(this.target)
        },
        target_enter () {
          this.show(this.target)
        },
        target_leave () {
          this.hide()
        }
      }
    }
</script>
