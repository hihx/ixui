# Tree 树形控件
----
### 基础用法
基础的树形结构展示。

<div class="demo-block">
  <ix-tree :data="data" :props="defaultProps" @node-click="handleNodeClick"></ix-tree>
</div>
<script>
let id = 100;
  export default {
    data() {
      return {
        data: [{
          label: '一级 1',
          children: [{
            label: '二级 1-1',
            children: [{
              label: '三级 1-1-1'
            }]
          }]
        }, {
          label: '一级 2',
          children: [{
            label: '二级 2-1',
            children: [{
              label: '三级 2-1-1'
            }]
          }, {
            label: '二级 2-2',
            children: [{
              label: '三级 2-2-1'
            }]
          }]
        }, {
          label: '一级 3',
          children: [{
            label: '二级 3-1',
            children: [{
              label: '三级 3-1-1'
            }]
          }, {
            label: '二级 3-2',
            children: [{
              label: '三级 3-2-1'
            }]
          }]
        }],
        defaultProps: {
          children: 'children',
          label: 'label',
          id: 'id'
        },
        props: {
          label: 'name',
          children: 'zones'
        },
        count: 1,
        data2: [{
          id: 1,
          label: '一级 1',
          children: [{
            id: 4,
            label: '二级 1-1',
            children: [{
              id: 9,
              label: '三级 1-1-1'
            }, {
              id: 10,
              label: '三级 1-1-2'
            }]
          }]
        }, {
          id: 2,
          label: '一级 2',
          children: [{
            id: 5,
            label: '二级 2-1',
            disabled: true,
          }, {
            id: 6,
            label: '二级 2-2'
          }]
        }, {
          id: 3,
          label: '一级 3',
          children: [{
            id: 7,
            label: '二级 3-1',
            disabled: true,
          }, {
            id: 8,
            label: '二级 3-2'
          }]
        }],
      };
    },
    methods: {
      handleNodeClick(data) {
        console.log(data);
      },
      loadNode(node, resolve) {
        if (node.level === 0) {
          return resolve([{ name: 'region1' }, { name: 'region2' }]);
        }
        if (node.level > 3) return resolve([]);
        var hasChild;
        if (node.data.name === 'region1') {
          hasChild = true;
        } else if (node.data.name === 'region2') {
          hasChild = false;
        } else {
          hasChild = Math.random() > 0.5;
        }
        setTimeout(() => {
          var data;
          if (hasChild) {
            data = [{
              name: 'zone' + this.count++
            }, {
              name: 'zone' + this.count++
            }];
          } else {
            data = [];
          }
          resolve(data);
        }, 500);
      },
      setCheckedKeys() {
        this.$refs.tree.setCheckedKeys([3]);
      },
      resetChecked() {
        this.$refs.tree.setCheckedKeys([]);
      },
      append(data) {
        console.log('append', data);
        const newChild = { id: id++, label: 'testtest', children: [] };
        if (!data.children) {
          this.$set(data, 'children', []);
        }
        data.children.push(newChild);
      },
      remove(node, data) {
        console.log('remove', node, data);
        const parent = node.parent;
          const children = parent&&parent.children || this.data;
        const index = children.findIndex(d => d.id === data.id);
        children.splice(index, 1);
      },
    }
  };
</script>

::: demo
```html
  <ix-tree
  :data="data"
  :props="defaultProps"
  @node-click="handleNodeClick"></ix-tree>
<script>
  export default {
    data() {
      return {
        data: [{
          label: '一级 1',
          children: [{
            label: '二级 1-1',
            children: [{
              label: '三级 1-1-1'
            }]
          }]
        }, {
          label: '一级 2',
          children: [{
            label: '二级 2-1',
            children: [{
              label: '三级 2-1-1'
            }]
          }, {
            label: '二级 2-2',
            children: [{
              label: '三级 2-2-1'
            }]
          }]
        }, {
          label: '一级 3',
          children: [{
            label: '二级 3-1',
            children: [{
              label: '三级 3-1-1'
            }]
          }, {
            label: '二级 3-2',
            children: [{
              label: '三级 3-2-1'
            }]
          }]
        }],
        defaultProps: {
          children: 'children',
          label: 'label'
        }
      };
    },
    methods: {
      handleNodeClick(data) {
        console.log(data);
      }
    }
  };
</script>
```
:::

### 可选择
适用于需要选择层级时使用。

<div class="demo-block">
  <ix-tree :props="props" @node-click="handleNodeClick" lazy show-checkbox :load="loadNode"></ix-tree>
</div>

::: demo
```html
  <ix-tree
  :props="props"
  @node-click="handleNodeClick"
  lazy
  show-checkbox
  :load="loadNode"></ix-tree>
```
:::

### 默认展开和默认选中
可将 Tree 的某些节点设置为默认展开或默认选中<br>
需设置`props`的`id`字段<br>
此处还演示了`disabled`禁用状态

<div class="demo-block">
  <ix-tree :data="data2" :props="defaultProps" :default-expanded-keys="[2, 3]" :default-checked-keys="[5]" show-checkbox></ix-tree>
</div>

::: demo
```html
  <ix-tree
  :data="data2"
  :props="defaultProps"
  @node-click="handleNodeClick"
  show-checkbox
  :default-expanded-keys="[2, 3]"
  :default-checked-keys="[5]"></ix-tree>
<script>
  export default {
    data() {
      return {
        defaultProps: {
          children: 'children',
          label: 'label',
          id: 'id'
        },
        data2: [{
          id: 1,
          label: '一级 1',
          children: [{
            id: 4,
            label: '二级 1-1',
            children: [{
              id: 9,
              label: '三级 1-1-1'
            }, {
              id: 10,
              label: '三级 1-1-2'
            }]
          }]
        }, {
          id: 2,
          label: '一级 2',
          children: [{
            id: 5,
            label: '二级 2-1'
            disabled: true,
          }, {
            id: 6,
            label: '二级 2-2'
          }]
        }, {
          id: 3,
          label: '一级 3',
          children: [{
            id: 7,
            label: '二级 3-1'
            disabled: true,
          }, {
            id: 8,
            label: '二级 3-2'
          }]
        }],
      };
    },
  };
</script>
```
:::

### 树节点的选择

<div class="demo-block">
  <ix-tree ref="tree" :data="data2" :props="defaultProps" default-expand-all show-checkbox></ix-tree>
  <ix-button @click="setCheckedKeys">通过 key 设置</ix-button>
  <ix-button @click="resetChecked">清空选中</ix-button>
</div>

::: demo
```html
<ix-tree ref="tree" :data="data" :props="defaultProps" default-expand-all show-checkbox></ix-tree>
<ix-button @click="setCheckedKeys">通过 key 设置</ix-button>
<ix-button @click="resetChecked">清空选中</ix-button>
<script>
  export default {
    data() {
      return {
        defaultProps: {
          children: 'children',
          label: 'label',
          id: 'id'
        },
        data2: [{
          id: 1,
          label: '一级 1',
          children: [{
            id: 4,
            label: '二级 1-1',
            children: [{
              id: 9,
              label: '三级 1-1-1'
            }, {
              id: 10,
              label: '三级 1-1-2'
            }]
          }]
        }, {
          id: 2,
          label: '一级 2',
          children: [{
            id: 5,
            label: '二级 2-1'
            disabled: true,
          }, {
            id: 6,
            label: '二级 2-2'
          }]
        }, {
          id: 3,
          label: '一级 3',
          children: [{
            id: 7,
            label: '二级 3-1'
            disabled: true,
          }, {
            id: 8,
            label: '二级 3-2'
          }]
        }],
      };
    },
    methods: {
      setCheckedKeys() {
        this.$refs.tree.setCheckedKeys([3]);
      },
      resetChecked() {
        this.$refs.tree.setCheckedKeys([]);
      }
    }
  };
</script>
```
:::

### 自定义节点内容
节点的内容支持自定义，可以在节点区添加按钮或图标等内容

<div class="demo-block">
  <ix-tree :data="data" :props="defaultProps" show-checkbox default-expand-all>
      <span class="custom-tree-node" slot-scope="{data, node}">
        <span>{{ data.label }}</span>
        <span>
          <ix-button
            type="text"
            size="mini"
            @click.stop="append(data)">
            Append
          </ix-button>
          <ix-button
            type="text"
            size="mini"
            @click.stop="remove(node, data)">
            Delete
          </ix-button>
        </span>
      </span>
  </ix-tree>
</div>

::: demo
```html
  <ix-tree
  :data="data"
  :props="defaultProps"
  show-checkbox
  default-expand-all>
      <span class="custom-tree-node" slot-scope="{data, node}">
        <span>{{ data.label }}</span>
        <span>
          <ix-button
            type="text"
            size="mini"
            @click.stop="append(data)">
            Append
          </ix-button>
          <ix-button
            type="text"
            size="mini"
            @click.stop="remove(node, data)">
            Delete
          </ix-button>
        </span>
      </span>
</ix-tree>
<script>
  let id = 100
  export default{
      methods: {
        append(data) {
          const newChild = { id: id++, label: 'testtest', children: [] };
          if (!data.children) {
            this.$set(data, 'children', []);
          }
          data.children.push(newChild);
        },
        remove(node, data) {
          const parent = node.parent;
          const children = parent&&parent.children || this.data;
          const index = children.findIndex(d => d.id === data.id);
          children.splice(index, 1);
        },
      }
  }
</script>
```
:::

### Attributes
| 参数      | 说明    | 类型      | 可选值       | 默认值   |
|---------- |-------- |---------- |-------------  |-------- |
|type	|类型	|string|	primary / success / warning / danger / info	|default|
|disabled	|是否禁用状态	|boolean	|—	|false|
|href	|原生 href 属性	|string|	—	|-|
|to	| router-link 路由属性	|string / object|	—	|-|
|icon|图标类名		|string|	—|	-|
